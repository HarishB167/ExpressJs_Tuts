
- Basic Setup
* Install node
* In project dir : create package.json as
npm init -y
* Libraries : npm i express
npm i --save-dev nodemon
* In package.json in scripts add
"devStart": "nodemon server.js"
* Use : npm run devStart
* Create server.js
* Setting proxy if required
npm config set proxy http://username:password@host:port
npm config set https-proxy http://username:password@host:port

- Express server setup
* In server.js
const express = require('express')
const app = express() // setup actual server
app.listen(3000) // run server
* Request types
app.get, app.post, app.put, app.delete, app.patch
* Setup routes
app.get(path, func(req, res, [next]));
> 99.9% of the time next arg is not used.
> app.get("/", (req, res) => {
  ..do something..
  res.send('some text'); // sending text back to user.
})

- Sending data
res.send() - for testing purpose
res.sendStatus(200/404/500) - sending back status code
res.status(code).send(data) - sending data with status code
res.status(code).json({message: "msg"}) - sending json data with status code
res.json({..}) - sending json data with default status code (200)
res.download("pathOfFile") - send file to user.
res.render("pathOfHtmlFile", [dataObjForView]) - send html markup for browser 
optionally with data to view.
res.redirect(path) - redirect to different url.

- Rendering
* Views are html files
* Create views/ folder
* View-engines : ejs, pug
* Install : npm i ejs
* Using engine : 
Add after declaring app.
app.set('view engine', 'ejs ')
* In views/ rename index.html to index.ejs
* Extension vscode install : ejs language support

- View engine EJS
* Using in template file
<%= 2 + 2 %>
> %= makes output to page
> Will render 4
* Accessing fields of passed object to template
<%= fieldName %>
* Accessing while object
<%= locals.fieldName %>
For preventing error of not defined.
* Checking field to exist before rendering
<%= locals.fieldName || "DefaltVal" %>


- Routers
* Create folder routes
* Create routes/users.js
const express = require('express')
const router = express.Router() 
* router has same methods as of app
router.get("/", func) // for /users
router.get("/new", func) // for /users/new
* Export it
module.exports = router
* Import in server.js
> Before app.listen
const userRouter = require('./routes/users')
app.use('/users', userRouter) // Linking route to a path

- Advaned routing
* Getting user by id
router.get('/:id', (req,res) => {
  const id = req.params.id
  ...
})
* Accessing param : req.params.id
* Put dynamic route at last after static routes, i.e.,
/new before /:id
* Using chaining for a route
Removing duplicacy due to /:id in get, put, delete
router.route('/:id').get((req,res) => {})
  .put(func)).delete(func)

- Middleware : router.param
* Runs when given url has specific param in url.
* Runs before actual router methods.
* To pass control to router method, we need to call next().
* We can add data to request (req.newField) to pass to router methods.
And it can be accessed in router methods (req.newField)
* Running when id is present in url
router.param('id', (req, res, next, value) => {
  req.user = usersFromDb[value]
  next()
})
* value is value of the id param.

- Middleware
* In server.js
* Function, args - req, res, next
const logger = (req, res, next) => {
  console.log(req.originalUrl)
  next()
}
* Using middleware function
app.use(logger)
* To use this middleware for all functions
use it after declaring app
* It is runned only by routes, routers defined
after using it. Routes and routers before using this
does not run this middleware.
* Using middleware for only one route
app.get(path, ...midlewares..., (req, res) => {})
> Multiple middlewares can be used
> path is first argument
> function is last argument
> rest are middleware functions
* In router file, if using at start, then
middleware is runned by all functions in this router file.
router.use(logger)

- Built-in middlewares
* Serve static files.
Create public folder
Add static files here
In server.js, after declaring app
app.use(express.static("public"))
* Parsing Form/JSON Data
> Accessing data of post request using middleware
In server.js : app.use(express.urlencoded({ extended:true }))
extended : true uses qs library, false uses querystring buil-in library.
In users.js, in post method : const name = req.body.firstName
> Accessing json data
In server.js : app.use(express.json())
Runs when content-type header is application/json in request.
Assigns json converted body to req.body

- Parse query params
* Access as : req.query.fieldName

-----------------------------------------
Section 2 -

- Using mongoose to access MongoDB
* Install mongoose : npm i mongoose
* Install development dependencies
npm i --save-dev dotenv nodemon
* dotenv : to get environment variables form .env file
* Define connection string in .env as
DATABASE_URL=mongodb://127.0.0.1:27017/sampleData
* Loading env in server.js as, write at top
require('dotenv').config()
* Using mongoose
const mongoose = require('mongoose')
mongoose.connect(process.env.DATABASE_URL, [connectFunc], [errorFunc])
connectFunc : Called when connects to DB.
errorFunc(e) : Called when some error in connecting.
const db = mongoose.connection
* On error in mongoose
db.on('error', (error) => console.error(error))
* On successfull connection
db.once('open', () => console.log("Connected to Database"))

- Rest client
* VSCode Extension
* Similar to postman
* Create a request
GET <url>
* Separate using ###

- Creating a model (schema)
* Create models folder in root
* Create model as models/subscriber.js
const mongoose = require("mongoose")
* Create schema
const subscriberSchema = new mongoose.Schema({
  name:{
    type: String, required: true
  },
  subscribedToChannel: {
    type: String, required: true
  },
  subscribeDate: {
    type: Date, required: true, default: Date.now
  }
})
* Types : String, Number, Date, ObjIdRef, NestedObj
array - [] //of anything, [String] //of string
* ObjIdRef type
> const userSchema = mongoose.Schema({...})
bestFriend : mongoose.SchemaTypes.ObjectId
* NestedObj
1st way => address : {street: String, city: String}
2nd way => Define schema for address as
const addressSchema = new mongoose.Schema({street: String, city: String})
const userSchma = new mongoose.Schema({...address: addressSchema...})
This 2nd way also creates id for addressSchema in db.
* Flags in schema
type : type of field
required : true/false
lowercase : true/false (Data is converted and saved in lowercase)
uppercase : true/false (Data is converted and saved in uppercase)
default : default value of function, e.g. -> for date () => Date.now()
immutable : true/false, cannot be changed after first creation and ignores changes 
and doesn't throw error.
min/max : for number type
minLength/maxLength : for string type
validate : custom validation object
* Custom validation object 
validate : {
  validator: v => true/false,
  message : props => "msg : " + props.value
}
> Only works when using create and save methods of mongoose
* Creating and Exporting model
module.exports = mongoose.model(modelNameInDb, schema)
module.exports = mongoose.model('Subscriber', subscriberSchema)

- Using model
* All MongoDb functions are available on Model.
* Using
> Creating : 
1. const user = new User({k-v pairs})
await user.save()
2. const user = await User.create({k-v pairs})
> Updating : 
const user = //get from db
user.field = value; await user.save()
* Error catching
try{...} catch(e){console.log(e.message)}
* In subscriber.js route
const Subscriber = require('../models/subscriber')
* In get all subscribers using async as
router.get('/', async (req, res) => {
  try {
    const subscribers = await Subscriber.find()
    res.json(subscribers)
  }
  catch (err) {
    res.status(500).json({message: err.message})
  }
})
* Posting a subscriber
router.post('/', async (req, res) => {
  const subscriber = new Subscriber({
    name: req.body.name,
    subscribedToChannel: req.body.subscribedToChannel
  })

  try {
    const newSubscriber = await subscriber.save();
    res.status(201).json(newSubscriber)
  }
  catch (err) {
    res.status(400).json({message: err.message})
  } 
})
* Removing item
const item = await Subscriber.findById(req.params.id)
item.deleteOne()
> In delete request : req.subscriber.deleteOne()
* Updating
const item = await Subscriber.findById(req.params.id)
item.name = req.body.name
item.save()
> In patch request
if(req.body.name != null)
  res.subscriber.name = req.body.name
if(req.body.subscribedToChannel != null)
  res.subscriber.subscribedToChannel = req.body.subscribedToChannel
try {
  const updatedSubscriber = await res.subscriber.save()
  res.json(updatedSubscriber)
}
catch (err) {
  res.status(400).json({message: err.message})
}

--------------------------------------

Completed till 12:40
Vid : https://www.youtube.com/watch?v=DZBGEVgL2eE



