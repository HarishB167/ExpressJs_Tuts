Section 3 - User Authentication

- Install bcrypt
npm i bcrypt

- Getting users list
> For testing purpose
> const users = []
> app.get('/users', (req, res) => {
    res.json(users)
})

- Encrypting password
* Import bcrypt
const bcrypt = require('bcrypt')
* 2 steps
> Create salt
> Use salt and password to create hashed password
* Salt works : salt is added to beginning of password
* Every password has different salt.
* Similar password also have different hashes.
* Salt for every password is stored in hashed password.
* Bcrypt is async library, so func in routers should be async
* Creating salt
const salt = await bcrypt.genSalt([rounds])
rounds is optional : 10 takes few seconds, 20 takes few days
* Creating hashedPassword
const hashedPassword = await bcrypt.hash(password, salt)
* Creating hashedPassword with default salt
const hashedPassword = await bcrypt.hash(password, 10)
* Comparing hash and possible password
await bcrypt.compare(password, hashedPassword)

- Creating user
> app.post('/users', async (req, res) => {
    try {
        const salt = await bcrypt.genSalt()
        const hashedPassword = await bcrypt.hash(req.body.password, salt)
        const user = {name : req.body.name, password: hashedPassword}
        users.push(user)
        res.sendStatus(201)
    }
    catch {
        res.sendStatus(500)
    }
})

- Login user
> app.post('/users/login', async (req, res) => {
    const user = users.find(user => user.name === req.body.name)
    if (user === null) res.status(400).send("Can not find user")
    try {
        if (await bcrypt.compare(req.body.password, user.password))
            res.send("Success")
        else res.send("Not allowed")
    } catch {
        res.sendStatus(500)
    }
})


------------------------------------------
Section 4 - JWT Authentication

- Overview
* Simple JWT Authentication
Create tokens
Send tokens
Authenticate Tokens on server
* Using Refresh Token
Automatically refresh jwt tokens - to increase security,
revoke priviliges from users (logout).

- Setup
* Libraries :
npm i jsonwebtoken experss dotenv
dev : nodemon
* Secret tokens storage
Development : .env file
Productoin : env variables.
* Create server.js file and create run
command in package.json

- Creating json webtoken
* Import : const jwt = require("jsonwebtoken");
* Create 2 keys in env file
ACCESS_TOKEN_SECRET, REFRESH_TOKEN_SECRET
* In login route
> Authenticate user
> store user data in object
const data = {name: "some name", ...}
> Create token
const accessToken = jwt.sign(data, process.env.ACCESS_TOKEN_SECRET);
> Send token in response
res.json({ accessToken });

- Authenticating tokens
* Create middleware as
function authenticateToken(req, res, next) {..}
* Taking token from header
> Header will have data : Bearer <token>
> const authHeader = req.headers['authorization']
> const token = authHeader && authHeader.split(' ')[1]
* If no token provided
if(token == null) return res.statusCode(401)
* Verfiying token
jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, func)
> func(err, data) {
    if (err) return res.statusCode(403) // Forbidden
    req.user = data
    next()
}
* In getting posts :
> Add authorization middleware
> Use req.user to filter
res.json(posts.filter(p => p.username == req.user.name))

- Refresh Tokens
* Need
> To have expiration on accessToken
> Refresh token are saved in safe database
* Refresh token can be invalidated on logout.
By deleting it from DB or cache of valid refresh tokens' list.
* Create authServer.js
> Copy all from server.js
> Change port to 4000
> Remove posts route and data and authrorize middleware.
> Create function generateAccessToken(user) {
    return jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, {expiresIn : '15s'})
}
> ExpiresIn can be : 10s, 10m etc. 
> In login route : create token as 
const accessToken = generateAccessToken(user)
const refreshToken = jwt.sign(user, process.env.REFRESH_TOKEN_SECRET)
res.json({accessToken, refreshToken})
* Store list of refresh tokens in array
let refreshTokens = []
In production should be stored and retrieved from DB or redis cache.
> In login route. Also push refresh token to this list.
* Create refresh token route
app.post('/token', (req,res) => {
    const refreshToken = req.body.token
    if (refreshToken == null) res.sendStatus(401)
    if (!refreshTokens.includes(refreshToken)) res.sendStatus(403)
    jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err,user) => {
        if (err) return res.sendStatus(403);
        const accessToken = generateAccessToken({name: user.name})
        res.json({accessToken})
    })
})
* Logging out or deleting refresh token
> app.delete("/logout", (req, res) => {
    refreshTokens = refreshTokens.filter(token => token !== req.body.token)
    res.sendStatus(204)
})

